name: K8s News Engine CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test-analytics:
    name: Test Analytics Service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services/analytics-py
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8
          
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Test with pytest
        run: |
          python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/analytics-py/coverage.xml
          flags: analytics-py

  build-analytics:
    name: Build Analytics Service
    runs-on: ubuntu-latest
    needs: [security-scan, test-analytics]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-analytics
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Analytics Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/analytics-py
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-publisher:
    name: Build Publisher Service
    runs-on: ubuntu-latest
    needs: [security-scan]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-publisher
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Publisher Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/publisher
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-analytics, build-publisher]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Set up Kubernetes config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
          
      - name: Update deployment images
        run: |
          kubectl set image cronjob/analytics-cronjob analytics=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-analytics:sha-${{ github.sha }} -n news-engine-staging
          kubectl set image deployment/publisher publisher=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-publisher:sha-${{ github.sha }} -n news-engine-staging
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/publisher -n news-engine-staging --timeout=300s
          kubectl get cronjob analytics-cronjob -n news-engine-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-analytics, build-publisher]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Set up Kubernetes config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > $HOME/.kube/config
          
      - name: Update deployment images
        run: |
          kubectl set image cronjob/analytics-cronjob analytics=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-analytics:sha-${{ github.sha }} -n news-engine-prod
          kubectl set image deployment/publisher publisher=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-publisher:sha-${{ github.sha }} -n news-engine-prod
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/publisher -n news-engine-prod --timeout=300s
          kubectl get cronjob analytics-cronjob -n news-engine-prod

  create-jira-issue:
    name: Create Jira Issue on Failure
    runs-on: ubuntu-latest
    needs: [build-analytics, build-publisher, deploy-staging, deploy-production]
    if: failure()
    steps:
      - name: Create Jira Issue
        uses: atlassian/gajira-create@v3
        with:
          project: K8SNE
          issuetype: Bug
          summary: "CI/CD Pipeline Failure - ${{ github.workflow }} #${{ github.run_number }}"
          description: |
            Pipeline failed for commit ${{ github.sha }}
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Workflow:** ${{ github.workflow }}
            **Run:** ${{ github.run_number }}
            
            **Failed Jobs:**
            ${{ toJson(needs) }}
            
            **Link:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          fields: '{"labels": ["ci-cd", "pipeline-failure", "automated"]}'